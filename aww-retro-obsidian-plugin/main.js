/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AwwRetro
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalDir: "journal",
  retroDir: "retrospectives"
};
var AwwRetro = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading AwwRetro plugin");
    await this.loadSettings();
    this.addSettingTab(new AwwRetroSettingTab(this.app, this));
    this.addCommand({
      id: "open-retrospective",
      name: "Open retrospective",
      editorCallback: (editor, view) => {
        this.openRetrospective(view.file);
      }
    });
  }
  onunload() {
    console.log("unloading AwwRetro plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  isJournalFile(file) {
    const journalRegex = /^\d{4}(-\d{2}(-\d{2})?|-W\d{2})?\.md$/;
    return file.path.startsWith(this.settings.journalDir) && journalRegex.test(file.name);
  }
  getRetroPath(journalFile) {
    const retroFileName = `r${journalFile.name}`;
    const retroFileDir = journalFile.parent.path.replace(this.settings.journalDir, this.settings.retroDir);
    return `${retroFileDir}/${retroFileName}`;
  }
  async openRetrospective(file) {
    if (!this.isJournalFile(file)) {
      new import_obsidian.Notice("Not a journal file.");
      return;
    }
    const retroFilePath = this.getRetroPath(file);
    let retroFile = this.app.vault.getAbstractFileByPath(retroFilePath);
    if (retroFile instanceof import_obsidian.TFile) {
      const newLeaf = this.app.workspace.getLeaf(true);
      await newLeaf.openFile(retroFile);
    }
  }
};
var AwwRetroSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Aww Retrospectives Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal directory").setDesc("The directory where your journal notes are stored.").addText((text) => text.setPlaceholder("journal").setValue(this.plugin.settings.journalDir).onChange(async (value) => {
      this.plugin.settings.journalDir = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Retrospectives directory").setDesc("The directory where your retrospective notes are stored.").addText((text) => text.setPlaceholder("retrospectives").setValue(this.plugin.settings.retroDir).onChange(async (value) => {
      this.plugin.settings.retroDir = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSwgTm90aWNlLCBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIFNldHRpbmcsIEVkaXRvciwgTWFya2Rvd25WaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbnRlcmZhY2UgQXd3UmV0cm9TZXR0aW5ncyB7XG5cdGpvdXJuYWxEaXI6IHN0cmluZztcblx0cmV0cm9EaXI6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogQXd3UmV0cm9TZXR0aW5ncyA9IHtcblx0am91cm5hbERpcjogJ2pvdXJuYWwnLFxuXHRyZXRyb0RpcjogJ3JldHJvc3BlY3RpdmVzJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXd3UmV0cm8gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogQXd3UmV0cm9TZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ2xvYWRpbmcgQXd3UmV0cm8gcGx1Z2luJyk7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgQXd3UmV0cm9TZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdvcGVuLXJldHJvc3BlY3RpdmUnLFxuXHRcdFx0bmFtZTogJ09wZW4gcmV0cm9zcGVjdGl2ZScsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0dGhpcy5vcGVuUmV0cm9zcGVjdGl2ZSh2aWV3LmZpbGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ3VubG9hZGluZyBBd3dSZXRybyBwbHVnaW4nKTtcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0cHJpdmF0ZSBpc0pvdXJuYWxGaWxlKGZpbGU6IFRGaWxlKTogYm9vbGVhbiB7XG5cdFx0Y29uc3Qgam91cm5hbFJlZ2V4ID0gL15cXGR7NH0oLVxcZHsyfSgtXFxkezJ9KT98LVdcXGR7Mn0pP1xcLm1kJC87XG5cdFx0cmV0dXJuIGZpbGUucGF0aC5zdGFydHNXaXRoKHRoaXMuc2V0dGluZ3Muam91cm5hbERpcikgJiYgam91cm5hbFJlZ2V4LnRlc3QoZmlsZS5uYW1lKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UmV0cm9QYXRoKGpvdXJuYWxGaWxlOiBURmlsZSk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcmV0cm9GaWxlTmFtZSA9IGByJHtqb3VybmFsRmlsZS5uYW1lfWA7XG5cdFx0Y29uc3QgcmV0cm9GaWxlRGlyID0gam91cm5hbEZpbGUucGFyZW50LnBhdGgucmVwbGFjZSh0aGlzLnNldHRpbmdzLmpvdXJuYWxEaXIsIHRoaXMuc2V0dGluZ3MucmV0cm9EaXIpO1xuXHRcdHJldHVybiBgJHtyZXRyb0ZpbGVEaXJ9LyR7cmV0cm9GaWxlTmFtZX1gO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBvcGVuUmV0cm9zcGVjdGl2ZShmaWxlOiBURmlsZSkge1xuXHRcdGlmICghdGhpcy5pc0pvdXJuYWxGaWxlKGZpbGUpKSB7XG5cdFx0XHRuZXcgTm90aWNlKFwiTm90IGEgam91cm5hbCBmaWxlLlwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCByZXRyb0ZpbGVQYXRoID0gdGhpcy5nZXRSZXRyb1BhdGgoZmlsZSk7XG5cdFx0bGV0IHJldHJvRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChyZXRyb0ZpbGVQYXRoKTtcblxuXHRcdGlmICgocmV0cm9GaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG5cdFx0XHRjb25zdCBuZXdMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7XG5cdFx0XHRhd2FpdCBuZXdMZWFmLm9wZW5GaWxlKHJldHJvRmlsZSBhcyBURmlsZSk7XG5cdFx0fVxuXG5cdH1cbn1cblxuY2xhc3MgQXd3UmV0cm9TZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogQXd3UmV0cm87XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogQXd3UmV0cm8pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnQXd3IFJldHJvc3BlY3RpdmVzIFNldHRpbmdzJ30pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnSm91cm5hbCBkaXJlY3RvcnknKVxuXHRcdFx0LnNldERlc2MoJ1RoZSBkaXJlY3Rvcnkgd2hlcmUgeW91ciBqb3VybmFsIG5vdGVzIGFyZSBzdG9yZWQuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ2pvdXJuYWwnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muam91cm5hbERpcilcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmpvdXJuYWxEaXIgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnUmV0cm9zcGVjdGl2ZXMgZGlyZWN0b3J5Jylcblx0XHRcdC5zZXREZXNjKCdUaGUgZGlyZWN0b3J5IHdoZXJlIHlvdXIgcmV0cm9zcGVjdGl2ZSBub3RlcyBhcmUgc3RvcmVkLicpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdyZXRyb3NwZWN0aXZlcycpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXRyb0Rpcilcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJldHJvRGlyID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE0RjtBQU81RixJQUFNLG1CQUFxQztBQUFBLEVBQzFDLFlBQVk7QUFBQSxFQUNaLFVBQVU7QUFDWDtBQUVBLElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFHNUMsTUFBTSxTQUFTO0FBQ2QsWUFBUSxJQUFJLHlCQUF5QjtBQUNyQyxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLLGNBQWMsSUFBSSxtQkFBbUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUV6RCxTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCO0FBQ3ZELGFBQUssa0JBQWtCLEtBQUssSUFBSTtBQUFBLE1BQ2pDO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNWLFlBQVEsSUFBSSwyQkFBMkI7QUFBQSxFQUN4QztBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDMUU7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUFBLEVBRVEsY0FBYyxNQUFzQjtBQUMzQyxVQUFNLGVBQWU7QUFDckIsV0FBTyxLQUFLLEtBQUssV0FBVyxLQUFLLFNBQVMsVUFBVSxLQUFLLGFBQWEsS0FBSyxLQUFLLElBQUk7QUFBQSxFQUNyRjtBQUFBLEVBRVEsYUFBYSxhQUE0QjtBQUNoRCxVQUFNLGdCQUFnQixJQUFJLFlBQVksSUFBSTtBQUMxQyxVQUFNLGVBQWUsWUFBWSxPQUFPLEtBQUssUUFBUSxLQUFLLFNBQVMsWUFBWSxLQUFLLFNBQVMsUUFBUTtBQUNyRyxXQUFPLEdBQUcsWUFBWSxJQUFJLGFBQWE7QUFBQSxFQUN4QztBQUFBLEVBRUEsTUFBYyxrQkFBa0IsTUFBYTtBQUM1QyxRQUFJLENBQUMsS0FBSyxjQUFjLElBQUksR0FBRztBQUM5QixVQUFJLHVCQUFPLHFCQUFxQjtBQUNoQztBQUFBLElBQ0Q7QUFFQSxVQUFNLGdCQUFnQixLQUFLLGFBQWEsSUFBSTtBQUM1QyxRQUFJLFlBQVksS0FBSyxJQUFJLE1BQU0sc0JBQXNCLGFBQWE7QUFFbEUsUUFBSyxxQkFBcUIsdUJBQVE7QUFDakMsWUFBTSxVQUFVLEtBQUssSUFBSSxVQUFVLFFBQVEsSUFBSTtBQUMvQyxZQUFNLFFBQVEsU0FBUyxTQUFrQjtBQUFBLElBQzFDO0FBQUEsRUFFRDtBQUNEO0FBRUEsSUFBTSxxQkFBTixjQUFpQyxpQ0FBaUI7QUFBQSxFQUdqRCxZQUFZLEtBQVUsUUFBa0I7QUFDdkMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUMsWUFBVyxJQUFJO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsZ0JBQVksU0FBUyxNQUFNLEVBQUMsTUFBTSw4QkFBNkIsQ0FBQztBQUVoRSxRQUFJLHdCQUFRLFdBQVcsRUFDckIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSxvREFBb0QsRUFDNUQsUUFBUSxVQUFRLEtBQ2YsZUFBZSxTQUFTLEVBQ3hCLFNBQVMsS0FBSyxPQUFPLFNBQVMsVUFBVSxFQUN4QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxhQUFhO0FBQ2xDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFFSixRQUFJLHdCQUFRLFdBQVcsRUFDckIsUUFBUSwwQkFBMEIsRUFDbEMsUUFBUSwwREFBMEQsRUFDbEUsUUFBUSxVQUFRLEtBQ2YsZUFBZSxnQkFBZ0IsRUFDL0IsU0FBUyxLQUFLLE9BQU8sU0FBUyxRQUFRLEVBQ3RDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLFdBQVc7QUFDaEMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUFBLEVBQ0w7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
